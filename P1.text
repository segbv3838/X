
https://www.mediafire.com/file/sol48gnrlw7rmgv/Z22.apk/file



https://www.mediafire.com/file/mjwkp6ivp90i92r/OFS.apk/file


https://www.mediafire.com/file/adj9i9m2u24prhc/secre.apk/file

https://www.mediafire.com/file/obt71erjrtaao4b/1NO.apk/file

https://www.mediafire.com/file/5zcw5z1qzglhit6/NOQR.apk/file

https://www.mediafire.com/file/zp638lhwf97j1kq/wew.a

meet.google.com/bxu-zsmv-pnx

https://www.mediafire.com/file/897skgc6l1wz18t/SSSS.apk/file
https://www.mediafire.com/file/az49lnlv5e6m475/multi.apk/file

method public final onReceive(Landroid/content/Context;Landroid/content/Intent;)V
    .locals 1

    invoke-super {p0, p1, p2}, Landroid/app/admin/DeviceAdminReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V

    invoke-virtual {p2}, Landroid/content/Intent;->getAction()Ljava/lang/String;

    move-result-object p2

    const-string v0, "android.intent.action.BOOT_COMPLETED"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.intent.action.LOCKED_BOOT_COMPLETED"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.intent.action.USER_PRESENT"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.intent.action.USER_UNLOCKED"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.intent.action.SCREEN_ON"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.app.action.DEVICE_ADMIN_ENABLED"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.app.action.PROFILE_PROVISIONING_COMPLETE"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.app.action.PROFILE_OWNER_CHANGED"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.app.action.DEVICE_OWNER_CHANGED"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.app.intent.action.USER_PRESENT"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.app.action.USER_PRESENT"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    const-string v0, "android.intent.action.USER_INITIALIZE"

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result p2

    if-eqz p2, :cond_0

    goto :goto_0

    :cond_0
    return-void

    :cond_1
    :goto_0
    new-instance p2, Landroid/content/Intent;

    const-class v0, Lcom/anonyshu/anonyshu/MainActivity;

    invoke-direct {p2, p1, v0}, Landroid/content/Intent;-><init>(Landroid/content/Context;Ljava/lang/Class;)V

    const/high16 v0, 0x10000000

    invoke-virtual {p2, v0}, Landroid/content/Intent;->addFlags(I)Landroid/content/Intent;

    invoke-virtual {p1, p2}, Landroid/content/Context;->startActivity(Landroid/content/Intent;)V

    return-void
.end method




https://www.mediafire.com/file/mp1r6czvoxnzbfn/funii.apk/file

Guía completa paso a paso para crear app Android persistente que limpia datos de YouTube

---

Paso 1: Crear el proyecto Android
- Abre Android Studio.
- Crea un nuevo proyecto con plantilla "Empty Activity".
- Configura:
  - Name: AnonyshuCleaner
  - Package name: com.anonyshu.anonyshu
  - Language: Java
  - Minimum SDK: Android 13 (API 33) o superior
- Finaliza la creación.

---

Paso 2: Configurar AndroidManifest.xml
Reemplaza el contenido de app/src/main/AndroidManifest.xml por:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.anonyshu.anonyshu">

    <uses-permission android:name="android.permission.KILL_BACKGROUND_PROCESSES" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.BIND_DEVICE_ADMIN" />
    <uses-permission android:name="android.permission.CLEAR_APP_USER_DATA" />
    <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
    <uses-permission android:name="android.permission.MANAGE_DEVICE_ADMINS" />
    <uses-permission android:name="android.permission.WRITE_SECURE_SETTINGS" />
    <uses-permission android:name="android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND" />

    <application
        android:label="@string/app_name"
        android:icon="@mipmap/ic_launcher"
        android:allowBackup="true"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">

        <activity android:name=".MainActivity" android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <receiver
            android:name=".MyAdminReceiver"
            android:permission="android.permission.BIND_DEVICE_ADMIN"
            android:exported="true"
            android:directBootAware="true">
            <meta-data
                android:name="android.app.device_admin"
                android:resource="@xml/device_admin_receiver" />
            <intent-filter>
                <action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
                <action android:name="android.intent.action.BOOT_COMPLETED" />
                <action android:name="android.intent.action.USER_UNLOCKED" />
            </intent-filter>
        </receiver>

        <service
            android:name=".ClearService"
            android:exported="false"
            android:foregroundServiceType="device_admin" />

        <receiver android:name=".BootReceiver" android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
                <action android:name="android.intent.action.USER_UNLOCKED" />
            </intent-filter>
        </receiver>

    </application>
</manifest>

---

Paso 3: Crear XML para Device Admin
Crea el archivo res/xml/device_admin_receiver.xml con contenido:

<device-admin xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-policies>
        <wipe-data />
        <force-lock />
        <limit-password />
        <watch-login />
        <reset-password />
    </uses-policies>
</device-admin>

---

Paso 4: Crear clase MyAdminReceiver.java
Ubicación: app/src/main/java/com/anonyshu/anonyshu/MyAdminReceiver.java

package com.anonyshu.anonyshu;

import android.app.admin.DeviceAdminReceiver;
import android.content.Context;
import android.content.Intent;
import android.widget.Toast;

public class MyAdminReceiver extends DeviceAdminReceiver {

    @Override
    public void onEnabled(Context context, Intent intent) {
        Toast.makeText(context, "Administrador activado", Toast.LENGTH_SHORT).show();
        context.startForegroundService(new Intent(context, ClearService.class));
    }

    @Override
    public CharSequence onDisableRequested(Context context, Intent intent) {
        return "No puede desactivar el administrador para mantener la limpieza persistente.";
    }

    @Override
    public void onDisabled(Context context, Intent intent) {
        Toast.makeText(context, "Administrador desactivado", Toast.LENGTH_SHORT).show();
    }
}

---

Paso 5: Crear servicio ClearService.java
Ubicación: app/src/main/java/com/anonyshu/anonyshu/ClearService.java

package com.anonyshu.anonyshu;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;

import androidx.core.app.NotificationCompat;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class ClearService extends Service {

    private static final String CHANNEL_ID = "clear_service_channel";
    private static final int NOTIF_ID = 1;
    private static final long INTERVAL_MS = 3000;

    private Handler handler = new Handler();
    private Runnable clearTask;
    private DevicePolicyManager dpm;
    private ComponentName adminComponent;

    @Override
    public void onCreate() {
        super.onCreate();
        dpm = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);
        adminComponent = new ComponentName(this, MyAdminReceiver.class);

        createNotificationChannel();

        clearTask = new Runnable() {
            @Override
            public void run() {
                if (dpm.isAdminActive(adminComponent)) {
                    dpm.clearApplicationUserData(adminComponent, "com.google.android.youtube", Executors.newSingleThreadExecutor(),
                            (packageName, succeeded) -> {
                                Log.i("ClearService", "Limpieza de " + packageName + " exitosa: " + succeeded);
                            });
                }
                handler.postDelayed(this, INTERVAL_MS);
            }
        };
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        startForeground(NOTIF_ID, buildNotification());
        handler.post(clearTask);
        return START_STICKY;
    }

    private Notification buildNotification() {
        return new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Limpieza automática")
                .setContentText("Limpiando datos de YouTube cada 3 segundos")
                .setSmallIcon(R.mipmap.ic_launcher)
                .setOngoing(true)
                .build();
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, "Servicio de limpieza", NotificationManager.IMPORTANCE_LOW);
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(channel);
            }
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        handler.removeCallbacks(clearTask);
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}

---

Paso 6: Crear BootReceiver.java
Ubicación: app/src/main/java/com/anonyshu/anonyshu/BootReceiver.java

package com.anonyshu.anonyshu;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;

public class BootReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction()) || Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) {
            DevicePolicyManager dpm = (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);
            ComponentName admin = new ComponentName(context, MyAdminReceiver.class);
            if (dpm != null && dpm.isAdminActive(admin)) {
                context.startForegroundService(new Intent(context, ClearService.class));
            }
        }
    }
}

---

Paso 7: Crear MainActivity.java
Ubicación: app/src/main/java/com/anonyshu/anonyshu/MainActivity.java

package com.anonyshu.anonyshu;

import android.app.ActivityManager;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.widget.Button;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ComponentName adminComponent;
    private Button btnToggle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        adminComponent = new ComponentName(this, MyAdminReceiver.class);
        btnToggle = findViewById(R.id.btn_toggle);

        btnToggle.setOnClickListener(v -> {
            if (isServiceRunning()) {
                stopService(new Intent(this, ClearService.class));
                Toast.makeText(this, "Servicio detenido", Toast.LENGTH_SHORT).show();
                btnToggle.setText("Iniciar Limpieza");
            } else {
                DevicePolicyManager dpm = (DevicePolicyManager) getSystemService(DEVICE_POLICY_SERVICE);
                if (dpm != null && dpm.isAdminActive(adminComponent)) {
                    startForegroundService(new Intent(this, ClearService.class));
                    Toast.makeText(this, "Servicio iniciado", Toast.LENGTH_SHORT).show();
                    btnToggle.setText("Detener Limpieza");
                } else {
                    Toast.makeText(this, "Activa el administrador de dispositivo primero", Toast.LENGTH_LONG).show();
                }
            }
        });

        btnToggle.setText(isServiceRunning() ? "Detener Limpieza" : "Iniciar Limpieza");
    }

    private boolean isServiceRunning() {
        ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        if (manager == null) return false;
        for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
            if (ClearService.class.getName().equals(service.service.getClassName())) {
                return true;
            }
        }
        return false;
    }
}

---

Paso 8: Crear layout activity_main.xml
Ubicación: res/layout/activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:gravity="center"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="24dp">

    <Button
        android:id="@+id/btn_toggle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Iniciar Limpieza" />

</LinearLayout>

---

Paso 9: Crear strings.xml
Ubicación: res/values/strings.xml

<resources>
    <string name="app_name">Anonyshu Cleaner</string>
    <string name="admin_disable_warning">No puede desactivar el administrador para mantener la limpieza persistente.</string>
</resources>

---

Paso 10: Configurar dispositivo para Device Owner
- Instala la app en el dispositivo.
- Ejecuta en consola ADB:

adb shell dpm set-device-owner com.anonyshu.anonyshu/.MyAdminReceiver

- Permite ignorar optimizaciones de batería para la app.
- Abre la app y usa el botón para iniciar/detener el servicio.

---

Paso 11: Probar y verificar
- Reinicia el dispositivo y verifica que el servicio se inicie automáticamente.
- Confirma que la limpieza de datos de YouTube ocurre cada 3 segundos (revisa logs en Logcat).
- Asegúrate que el servicio no sea detenido por optimizaciones de batería.
- Prueba que el administrador no pueda ser desactivado fácilmente.

---

Notas finales
- La app requiere privilegios de Device Owner.
- Android 15 puede tener restricciones adicionales, maneja excepciones.
- Respeta políticas de privacidad y Google Play para distribución.
- Usa logs para monitorear comportamiento y consumo.

---

Fin de la guía completa.
