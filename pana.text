===============================
Guía Completa para YouTubeCacheCleaner
===============================

Proyecto: App Android MDM para limpiar datos y caché de YouTube cada 2 segundos,
suspender ejecución, bloquear datos móviles y evitar optimizaciones de batería.

---

Paso 1: Crear proyecto en Android Studio
----------------------------------------
1. Nuevo proyecto → Empty Activity → Kotlin
2. Nombre: YouTubeCacheCleaner
3. Mínimo SDK: API 21 (Android 5.0) o superior

---

Paso 2: Configurar temas y colores
----------------------------------

Archivo: res/values/colors.xml

<resources>
    <color name="purple_500">#6200EE</color>
    <color name="purple_700">#3700B3</color>
    <color name="teal_200">#03DAC5</color>
</resources>

Archivo: res/values/themes.xml

<resources>
    <style name="Theme.YouTubeCacheCleaner" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorSecondary">@color/teal_200</item>
    </style>
</resources>

---

Paso 3: Modificar AndroidManifest.xml
-------------------------------------

Archivo: app/src/main/AndroidManifest.xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.tuempresa.youtubecachecleaner">

    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.BIND_DEVICE_ADMIN" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.YouTubeCacheCleaner">

        <receiver
            android:name=".MyDeviceAdminReceiver"
            android:permission="android.permission.BIND_DEVICE_ADMIN">
            <meta-data
                android:name="android.app.device_admin"
                android:resource="@xml/device_admin_receiver" />
            <intent-filter>
                <action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
            </intent-filter>
        </receiver>

        <service android:name=".YouTubeCleanerService" />

        <receiver android:name=".BootReceiver">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
            </intent-filter>
        </receiver>

    </application>

</manifest>

---

Paso 4: Crear device_admin_receiver.xml
---------------------------------------

Archivo: res/xml/device_admin_receiver.xml

<?xml version="1.0" encoding="utf-8"?>
<device-admin xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-policies>
        <limit-password />
        <watch-login />
        <reset-password />
        <force-lock />
        <wipe-data />
    </uses-policies>
</device-admin>

---

Paso 5: Crear MyDeviceAdminReceiver.kt
--------------------------------------

Archivo: app/src/main/java/com/tuempresa/youtubecachecleaner/MyDeviceAdminReceiver.kt

package com.tuempresa.youtubecachecleaner

import android.app.admin.DeviceAdminReceiver
import android.content.Context
import android.content.Intent

class MyDeviceAdminReceiver : DeviceAdminReceiver() {
    override fun onEnabled(context: Context, intent: Intent) {
        super.onEnabled(context, intent)
        // Opcional: acciones al activar admin
    }

    override fun onDisabled(context: Context, intent: Intent) {
        super.onDisabled(context, intent)
        // Opcional: acciones al desactivar admin
    }
}

---

Paso 6: Crear YouTubeCleanerService.kt
--------------------------------------

Archivo: app/src/main/java/com/tuempresa/youtubecachecleaner/YouTubeCleanerService.kt

package com.tuempresa.youtubecachecleaner

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.app.admin.DevicePolicyManager
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import androidx.core.app.NotificationCompat

class YouTubeCleanerService : Service() {

    private val handler = Handler(Looper.getMainLooper())
    private val interval: Long = 2000 // 2 segundos

    private val componentName by lazy { ComponentName(this, MyDeviceAdminReceiver::class.java) }
    private val dpm by lazy { getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager }

    private val CHANNEL_ID = "YouTubeCleanerChannel"

    private val clearTask = object : Runnable {
        override fun run() {
            try {
                // Suspender YouTube para que no se ejecute
                dpm.setApplicationHidden(componentName, "com.google.android.youtube", true)

                // Limpiar datos y caché de YouTube
                packageManager.clearApplicationUserData("com.google.android.youtube") {
                    // Callback opcional
                }

                // Bloquear acceso a datos móviles (API 28+)
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                    dpm.setMeteredDataDisabled(componentName, "com.google.android.youtube", true)
                }
            } catch (e: Exception) {
                e.printStackTrace()
            }

            handler.postDelayed(this, interval)
        }
    }

    override fun onCreate() {
        super.onCreate()
        createNotificationChannel()
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntentFlags = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)
            PendingIntent.FLAG_MUTABLE else 0
        val pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT or pendingIntentFlags)

        val notification: Notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("YouTube Cache Cleaner")
            .setContentText("Servicio activo limpiando YouTube")
            .setSmallIcon(R.drawable.ic_launcher_foreground) // Cambia por un ícono válido
            .setContentIntent(pendingIntent)
            .build()

        startForeground(1, notification)
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                CHANNEL_ID,
                "YouTube Cleaner Service Channel",
                NotificationManager.IMPORTANCE_LOW
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(serviceChannel)
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        handler.post(clearTask)
        return START_STICKY
    }

    override fun onDestroy() {
        handler.removeCallbacks(clearTask)
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}

---

Paso 7: Crear BootReceiver.kt
-----------------------------

Archivo: app/src/main/java/com/tuempresa/youtubecachecleaner/BootReceiver.kt

package com.tuempresa.youtubecachecleaner

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent

class BootReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action == Intent.ACTION_BOOT_COMPLETED) {
            val serviceIntent = Intent(context, YouTubeCleanerService::class.java)
            context.startForegroundService(serviceIntent)
        }
    }
}

---

Paso 8: Modificar MainActivity.kt
---------------------------------

Archivo: app/src/main/java/com/tuempresa/youtubecachecleaner/MainActivity.kt

package com.tuempresa.youtubecachecleaner

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        requestIgnoreBatteryOptimizations(this)

        val serviceIntent = Intent(this, YouTubeCleanerService::class.java)
        startForegroundService(serviceIntent)
    }

    private fun requestIgnoreBatteryOptimizations(context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val pm = context.getSystemService(Context.POWER_SERVICE) as android.os.PowerManager
            if (!pm.isIgnoringBatteryOptimizations(context.packageName)) {
                val intent = Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)
                intent.data = Uri.parse("package:" + context.packageName)
                startActivity(intent)
            }
        }
    }
}

---

Paso 9: Compilar e instalar
---------------------------

1. En Android Studio, selecciona **Build > Make Project** para compilar.  
2. Conecta un dispositivo Android limpio o reseteado.  
3. Instala la app desde Android Studio o con:

    adb install path_to_apk/app-debug.apk

4. Configura la app como Device Owner (solo en dispositivo reseteado):

    adb shell dpm set-device-owner com.tuempresa.youtubecachecleaner/.MyDeviceAdminReceiver

5. Reinicia el dispositivo.  
6. Abre la app y acepta la solicitud para ignorar optimizaciones de batería.  
7. La app iniciará el servicio en primer plano que limpia y bloquea YouTube automáticamente.

---

Notas importantes
------------------

- Intervalo de 2 segundos es agresivo, ajustar según necesidad.  
- Suspensión y bloqueo de datos móviles impiden ejecución y conexión de YouTube.  
- Bloqueo total de internet (Wi-Fi incluido) puede requerir soluciones MDM avanzadas.  
- Como Device Owner, la app es persistente y difícil de desinstalar o detener.

---

¡Listo! Con esta guía y código tienes todo para crear tu app MDM poderosa y persistente.

