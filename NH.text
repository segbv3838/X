package com.apolo.apolo;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.ServiceInfo;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.util.Log;

import androidx.core.app.NotificationCompat;

public class MonitorService extends Service {
    private static final String TAG = "MonitorService";
    private static final String CHANNEL_ID = "monitor_service_channel";
    private static final int NOTIF_ID = 1001;
    private static final long RESTART_INTERVAL_MS = 2000; // 15 segundos

    private Handler handler;
    private Runnable restartRunnable;

    @Override
    public void onCreate() {
        super.onCreate();
        createNotificationChannel();
        startForegroundServiceWithNotification();

        handler = new Handler(Looper.getMainLooper());
        setupRestartRunnable();
        handler.post(restartRunnable);
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(
                    CHANNEL_ID,
                    "Monitor Servicio",
                    NotificationManager.IMPORTANCE_LOW
            );
            channel.setDescription("Reinicia ClearService periódicamente");
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(channel);
            }
        }
    }

    private void startForegroundServiceWithNotification() {
        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Monitor activo")
                .setContentText("Reiniciando servicio de limpieza periódicamente")
                .setSmallIcon(R.mipmap.ic_launcher)
                .setPriority(NotificationCompat.PRIORITY_LOW)
                .setCategory(Notification.CATEGORY_SERVICE)
                .setOngoing(true)
                .build();

        if (Build.VERSION.SDK_INT >= 34) {
            startForeground(NOTIF_ID, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC);
        } else {
            startForeground(NOTIF_ID, notification);
        }
    }

    private void setupRestartRunnable() {
        restartRunnable = new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, "Reiniciando ClearService...");

                // Detener ClearService si está corriendo
                Intent stopIntent = new Intent(MonitorService.this, ClearService.class);
                stopService(stopIntent);

                // Iniciar ClearService
                Intent startIntent = new Intent(MonitorService.this, ClearService.class);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    startForegroundService(startIntent);
                } else {
                    startService(startIntent);
                }

                // Reprogramar reinicio
                handler.postDelayed(this, RESTART_INTERVAL_MS);
            }
        };
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.i(TAG, "MonitorService iniciado");
        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (handler != null && restartRunnable != null) {
            handler.removeCallbacks(restartRunnable);
        }
        Log.i(TAG, "MonitorService destruido");
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}
